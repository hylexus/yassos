ext {
    gradleConfigHome = System.getProperty("user.home") + "/.gradle"
    mavenRepoConfigLocation = gradleConfigHome + "/repo-config.gradle"

}

configure { rootProject } {
    if (file(mavenRepoConfigLocation).exists()) {
        apply from: file(mavenRepoConfigLocation)
        logger.quiet("the maven repo credentials will be load from : {}", mavenRepoConfigLocation)
    } else {
        ext {
            mavenRepoConfig = [
                    "mySnapshotMavenRepo": [
                            "url"     : "http:my-repo/repository/maven-snapshots",
                            "username": "iDoNotKnow",
                            "password": "iDoNotKnown"
                    ],
                    "myReleaseMavenRepo" : [
                            "url"     : "http:my-repo/repository/maven-snapshots",
                            "username": "iDoNotKnow",
                            "password": "iDoNotKnown"
                    ]
            ]
        }
        logger.quiet("maven repo credentials file : {} not found , use default maven repo config for debugging.", mavenRepoConfigLocation)
    }
}

configure(subprojects.findAll {
    (it.name != "yassos-server-plugin") && (it.name != "yassos-server") && (it.name != "docs") && (it.name != "yassos-distribution")
}) { subProject ->
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    jar {
        manifest.attributes["Implementation-Title"] = subProject.name
        manifest.attributes["Implementation-Version"] = subProject.version
        manifest.attributes["Automatic-Module-Name"] = subProject.name.replace('-', '.')
        manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("user.name")})"

        from(rootProject.projectDir) {
            include "LICENSE"
            include "NOTICE"
            into "META-INF"
        }

    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        classifier = "sources"
        from sourceSets.main.allSource
        // Don't include or exclude anything explicitly by default. See SPR-12085.
    }

    artifacts {
        archives sourcesJar
    }

    install {
        repositories.mavenInstaller {
            pom.version = "$project.version"
            pom.artifactId = "$project.name"
            pom.groupId = "$project.group"
        }
    }


    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = "$project.group"
                artifactId = "$project.name"
                version = "$project.version"

                from components.java
                artifact sourcesJar

                pom {
                    name = project.name
                    packaging = 'jar'
                    description = "${project.description}"

                    licenses {
                        license {
                            name = "Apache License, Version 2.0"
                            url = "https://www.apache.org/licenses/LICENSE-2.0"
                            distribution = "repo"
                        }
                    }
                    scm {
                        url = "https://github.com/hylexus/yassos"
                        connection = "scm:git:git@github.com:hylexus/yassos.git"
                        developerConnection = "scm:git:git@github.com:hylexus/yassos.git"
                    }
                    developers {
                        developer {
                            id = "hylexus"
                            name = "hylexus"
                            email = "hylexus@163.com"
                        }
                    }
                    issueManagement {
                        system = "GitHub"
                        url = "https://github.com/hylexus/yassos/issues"
                    }
                }
            }
        }
        repositories {
            if (isSnapshot()) {
                maven {
                    url mavenRepoConfig.mySnapshotMavenRepo.url
                    credentials {
                        username mavenRepoConfig.mySnapshotMavenRepo.username
                        password mavenRepoConfig.mySnapshotMavenRepo.password
                    }
                }
            } else {
                maven {
                    url mavenRepoConfig.myReleaseMavenRepo.url
                    credentials {
                        username mavenRepoConfig.myReleaseMavenRepo.username
                        password mavenRepoConfig.myReleaseMavenRepo.password
                    }
                }
            }
        }
    }
}

def isSnapshot() {
    rootProject.version.toString().toLowerCase().endsWith("snapshot")
}

project(":yassos-distribution") {
    configurations.archives.artifacts.clear()
}
project(":yassos-server") {
    configurations.archives.artifacts.clear()
}


